<?xml version="1.0"?>
<!-- 
    
rosrun aidin_ros pub_fake_imu.py
roslaunch gravity_compensation gravity_compensation.launch calib_data_file:=/home/jheidersberger/.ros/ft_calib/franka_ft_calib_data.yaml loop_rate:=1000
rosrun aidin_ros force_2_base.py 

-->


<launch>

  <!-- Arguments -->
  <arg name="sample_rate" default="1000" />
  <arg name="cutoff_frequency" default="35" />
  <arg name="arm_id" />
  <arg name="comm_type" default="can" />
  <arg name="ec_use_imu" default="false" />
  <!-- <arg name="ec_interface" default="enp9s0" /> -->
  <arg name="ec_interface" default="enp3s0" />

  <group if="$(eval arg('comm_type') == 'can')">
    <!-- FT CAN ROS Node -->
    <node name="aidin_can_ros_node" pkg="aidin_ros" type="aidin_can_ros_node" output="screen">
      <param name="sample_rate" value="$(arg sample_rate)" />
      <param name="cutoff_frequency" value="$(arg cutoff_frequency)" />
      <param name="arm_id" value="$(arg arm_id)" />
    </node>

    <!-- Node to publish fake IMU data -->
    <node name="pub_fake_imu" pkg="aidin_ros" type="pub_fake_imu.py" output="screen" >
      <param name="arm_id" value="$(arg arm_id)" />
    </node>
  </group>

  <group if="$(eval arg('comm_type') == 'ec')">
    <node name="aidin_ec_ros_node" pkg="aidin_ros" type="aidin_ec_ros_node" output="screen" launch-prefix="ethercat_grant">
    <!-- <node name="aidin_ec_ros_node" pkg="aidin_ros" type="aidin_ec_ros_node" output="screen" launch-prefix="echo LD_LIBRARY_PATH=$LD_LIBRARY_PATH &amp;&amp; ethercat_grant"> -->
      <param name="sample_rate" value="$(arg sample_rate)" />
      <param name="cutoff_frequency" value="$(arg cutoff_frequency)" />
      <param name="arm_id" value="$(arg arm_id)" />
      <param name="use_imu" value="$(arg ec_use_imu)" />
      <param name="interface" value="$(arg ec_interface)" />
      <remap from="/ft_sensor/$(arg ec_interface)/ft_raw" to="/ft_sensor/ft_raw"/>
    </node>

    <!-- IMU -->
    <group if="$(arg ec_use_imu)">
      <!-- Node to relay messages from /ft_sensor/imu to /imu/data -->
      <node name="imu_relay" pkg="topic_tools" type="relay" args="/ft_sensor/imu /imu/data"/>
    </group>
    <group unless="$(arg ec_use_imu)">
      <!-- Node to publish fake IMU data -->
      <node name="pub_fake_imu" pkg="aidin_ros" type="pub_fake_imu.py" output="screen" >
        <param name="arm_id" value="$(arg arm_id)" />
      </node>
    </group>
  </group>

  <group if="$(eval arg('arm_id') == 'panda')">
    <node pkg="tf" type="static_transform_publisher" name="fr3_to_panda" args="0 0 0 0 0 0 panda_sensor fr3_sensor 100" />
  </group>
  <group if="$(eval arg('arm_id') == 'fr3')">
    <node pkg="tf" type="static_transform_publisher" name="fr3_to_panda" args="0 0 0 0 0 0 fr3_sensor panda_sensor 100" />
  </group>

  <!-- Launch gravity compensation with calibration data and loop rate -->
  <include file="$(find gravity_compensation)/launch/gravity_compensation.launch">
    <!-- <arg name="calib_data_file" value="/home/jheidersberger/.ros/ft_calib/franka_ft_calib_data.yaml"/> -->
    <arg name="calib_data_file" value="$(env HOME)/.ros/ft_calib/franka_ft_calib_data.yaml"/>
    <arg name="loop_rate" value="1000"/>
  </include>

  <!-- Node to convert force to base frame -->
  <node name="force_2_base" pkg="aidin_ros" type="force_2_base.py" output="screen" />
</launch>
